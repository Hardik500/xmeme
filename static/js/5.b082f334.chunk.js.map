{"version":3,"sources":["hooks/useForm.js","utils/helper.js","components/memeForm.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"names":["useForm","callback","validate","initialProps","customErrors","useState","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","handleSubmit","event","preventDefault","handleChange","persist","target","name","value","trim","caption","url","initialState","MemeForm","props","toast","addTheMeme","updateTheMeme","toggleForm","memeUpdated","loading","setLoading","a","patchMeme","id","index","error","response","data","errorMessage","postMeme","className","alt","src","onError","style","width","textAlign","onSubmit","htmlFor","onChange","placeholder","disabled","type","color","onClick","e","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","i","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_defineProperty","obj","configurable","writable"],"mappings":"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","file":"static/js/5.b082f334.chunk.js","sourcesContent":["//useForm.js\n\n// This file contains a custom hook to handle form functionilties like handling of validation and taking in the form values\n\nimport { useState, useEffect } from 'react';\n\n\nconst useForm = (callback, validate, initialProps = {}, customErrors = {}) => {\n\n    const [values, setValues] = useState(initialProps);\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    // If there are no errors and user is trying to submit, call the respective function which is passed\n    useEffect(() => {\n        if (Object.keys(errors).length === 0 && isSubmitting) {\n            callback();\n        }\n    }, [errors]);\n\n    //Submits and checks if there are errors in the form and passes it\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        setErrors({...customErrors, ...validate(values)});\n        setIsSubmitting(true);\n    };\n\n    //Adds the values in an object WRT their names as key\n    const handleChange = (event) => {\n        event.persist();\n        setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n    };\n\n    return {\n        handleChange,\n        handleSubmit,\n        values,\n        errors,\n    }\n};\n\nexport default useForm;\n","// This function handles the main logic to validate fields and their respective values\nexport const validate = (values) => {\n    let errors = {};\n    if (!values.name?.trim()) {\n        errors.name = \"Name is required\";\n    } else if (values.name.length < 3) {\n        errors.name = \"At least 3 character name is required\";\n    }\n\n    if (!values.caption?.trim()) {\n        errors.caption = \"Caption is required\";\n    }\n\n    if (!values.url?.trim()) {\n        errors.url = \"URL is required\";\n    }\n\n    return errors;\n};","//meme-form\nimport { useState } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { postMeme, patchMeme } from \"../utils/api\";\nimport useForm from \"../hooks/useForm\";\nimport { ContentLoader } from \"./loader\";\nimport { validate } from \"../utils/helper\";\n\n// Sets the initial data form form fields\nconst initialState = {\n    name: \"\",\n    caption: \"\",\n    url: \"\",\n};\n\nexport default function MemeForm({\n    props,\n    toast,\n    addTheMeme,\n    updateTheMeme,\n    toggleForm,\n}) {\n    // If we are trying to update our meme\n    let memeUpdated = false;\n    let customErrors = {};\n\n    const [loading, setLoading] = useState(false);\n\n    // If props are being passed then our meme is getting updated\n    if (props) {\n        memeUpdated = true;\n    }\n\n    //Handles the submission or updation of meme based on the props\n    const submitForm = async () => {\n        setLoading(true);\n\n        if (memeUpdated) {\n            try {\n                await patchMeme(props.id, values);\n                updateTheMeme({ id: props.id, index: props.index });\n            } catch (error) {\n                toast.error(error.response.data.errorMessage);\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            try {\n                const { id } = await postMeme(values);\n                addTheMeme({ id });\n            } catch (error) {\n                toast.error(error.response.data.errorMessage);\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    const { values, errors, handleChange, handleSubmit } = useForm(\n        submitForm,\n        validate,\n        props ?? initialState,\n        customErrors\n    );\n\n    return (\n        <div>\n            <div className=\"signup-container\">\n                <div className=\"left-container\">\n                    {/* Displays the meme if a URL is found in the values */}\n                    {values?.url ? (\n                        <div className=\"meme-preview\">\n                            <img\n                                alt=\"meme\"\n                                src={values?.url}\n                                onError={() => (customErrors.url = \"Image url is invalid\")}\n                            />\n                        </div>\n                    ) : (\n                            <div\n                                className=\"meme-preview\"\n                                style={{ width: \"100%\", textAlign: \"center\" }}\n                            >\n                                <h2>MEME PREVIEW</h2>\n                            </div>\n                        )}\n                </div>\n                <div className=\"right-container\">\n                    <form className=\"addmeme-form\" onSubmit={handleSubmit}>\n                        <header>\n                            <h1>Enter Meme Details</h1>\n                            <div className=\"form-weight\">\n                                <div className=\"user-name\">\n                                    <label htmlFor=\"user-name\">Name*</label>\n                                    <input\n                                        name=\"name\"\n                                        onChange={handleChange}\n                                        id=\"user-name\"\n                                        placeholder=\"Enter your full name\"\n                                        value={values?.name || \"\"}\n                                        disabled={memeUpdated}\n                                        type=\"text\"\n                                    />\n                                    {errors.name && (\n                                        <p className=\"help is-danger\">{errors.name}</p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-weight\">\n                                <div className=\"meme-caption\">\n                                    <label htmlFor=\"meme-caption\">Caption*</label>\n                                    <input\n                                        name=\"caption\"\n                                        onChange={handleChange}\n                                        id=\"meme-caption\"\n                                        placeholder=\"Enter the meme caption\"\n                                        value={values?.caption}\n                                        type=\"text\"\n                                    />\n                                    {errors.caption && (\n                                        <p className=\"help is-danger\">{errors.caption}</p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-weight\">\n                                <div className=\"meme-url\">\n                                    <label htmlFor=\"meme-url\">Meme URL*</label>\n                                    <input\n                                        name=\"url\"\n                                        onChange={handleChange}\n                                        id=\"meme-url\"\n                                        placeholder=\"Enter the meme url\"\n                                        value={values?.url}\n                                        type=\"text\"\n                                    />\n                                    {errors.url && <p className=\"help is-danger\">{errors.url}</p>}\n                                </div>\n                            </div>\n                        </header>\n                        {loading ? <ContentLoader color=\"#e24c4c\" /> :\n                            (\n                                <footer>\n                                    <div className=\"set\">\n                                        <button\n                                            className=\"cstm-btn close-btn\"\n                                            onClick={(e) => {\n                                                e.preventDefault();\n                                                toggleForm();\n                                            }}\n                                        >Close</button>\n\n                                        {memeUpdated ? (\n                                            <input\n                                                type=\"submit\"\n                                                value=\"Update\"\n                                                className=\"cstm-btn\"\n                                                id=\"submit\"\n                                            />\n                                        ) : (\n                                                <input\n                                                    type=\"submit\"\n                                                    value=\"Submit\"\n                                                    className=\"cstm-btn\"\n                                                    id=\"submit\"\n                                                />\n                                            )}\n                                    </div>\n                                </footer>\n                            )}\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"sourceRoot":""}