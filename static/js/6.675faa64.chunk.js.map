{"version":3,"sources":["components/customImageHandler.js","components/memeGallery.js"],"names":["imgStyle","transition","selectedImgStyle","transform","margin","MemeGallery","theme","setMemeData","memes","useState","hovered","setHovered","handleHover","index","photos","direction","renderImage","props","photo","top","left","updateMeme","container","backgroundColor","cursor","overflow","position","isHovered","sx","width","sy","height","paddingBottom","id","src","date","author","caption","data","name","url","style","className","onClick","onMouseEnter","onMouseLeave","once","offset","alt","formatDistanceToNow","Date","Photo"],"mappings":"oNASMA,EAAW,CACfC,WAAY,mEAERC,EAAmB,CACvBC,UAAW,uCACXF,WAAY,kEACZG,OAAQ,WCDK,SAASC,EAAT,GAAqD,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,MAAS,EACjCC,mBAAS,MADwB,mBACxDC,EADwD,KAC/CC,EAD+C,KAGzDC,EAAc,SAACC,GACjBF,EAAWE,IAGf,OACI,cAAC,IAAD,CACIC,OAAQN,EACRO,UAAW,SACXX,OAAQ,GACRY,YAAa,SAACC,GAAD,ODRV,SAAeA,GAAQ,IAElCJ,EAUEI,EAVFJ,MACAK,EASED,EATFC,MACAZ,EAQEW,EARFX,MACAF,EAOEa,EAPFb,OACAW,EAMEE,EANFF,UACAI,EAKEF,EALFE,IACAC,EAIEH,EAJFG,KACAV,EAGEO,EAHFP,QACAE,EAEEK,EAFFL,YACAS,EACEJ,EADFI,WAGIC,EAAY,CAChBC,gBAA2B,UAAVjB,EAAoB,OAAS,OAC9CkB,OAAQ,UACRC,SAAU,SACVC,SAAU,YAGRC,EAAYjB,IAAYG,EAGtBe,GAAM,IAAO,GAAKV,EAAMW,MAAS,KAAO,IACxCC,GAAM,IAAO,GAAKZ,EAAMa,OAAU,KAAO,IAE/C7B,EAAiBC,UAAjB,kCAAwDyB,EAAxD,aAA+DE,EAA/D,QAGkB,WAAdf,IACFO,EAAUI,SAAW,WACrBJ,EAAUF,KAAOA,EACjBE,EAAUH,IAAMA,EACZQ,IACFL,EAAUU,cAAgB,QAnCK,IAwCjCC,EAOEf,EAPFe,GACAC,EAMEhB,EANFgB,IACAC,EAKEjB,EALFiB,KACAJ,EAIEb,EAJFa,OACAF,EAGEX,EAHFW,MACAO,EAEElB,EAFFkB,OACAC,EACEnB,EADFmB,QAIIC,EAAO,CACXC,KAAMH,EACNI,IAAKN,EACLG,QAASA,EACTJ,KACApB,SAGF,OACE,sBACE4B,MAAK,yBAAIrC,SAAQyB,SAAUP,GAAtB,IAAiCS,OAAQJ,EAAY,GAAKI,IAC/DW,UAAYf,EAA0C,eAA9B,4BAExBgB,QAAS,kBAAMtB,EAAWiB,IAC1BM,aAAc,kBAAMhC,EAAYC,IAChCgC,aAAc,kBAAMjC,EAAY,OANlC,UASGe,GACC,qBAAKe,UAAU,eAAf,SACE,6BAAKL,MAKT,cAAC,IAAD,CAAUN,OAAQA,EAAQF,MAAOA,EAAOiB,MAAM,EAAMC,OAAQ,IAA5D,SACE,iCACEC,IAAKX,EACLI,MACEd,EAAS,2BAAQ3B,GAAaE,GAArB,eAA+CF,IAEtDkB,MAKPS,GACC,sBAAKe,UAAU,eAAf,UACE,sBAAKA,UAAU,eAAf,uBAAyCN,KACzC,sBAAKM,UAAU,aAAf,oBAAoCO,YAAoB,IAAIC,KAAKf,IAAjE,eA3BCtB,GCrDKsC,CAAM,2BAAKlC,GAAN,IAAaP,UAASE,cAAaS,WAAYd,EAAaD","file":"static/js/6.675faa64.chunk.js","sourcesContent":["// customImageHandler.js\n\n// This component handles the functionality to display images in ReactPhotoGallery\n// And also handles the logic of what happens when an image is clicked or hovered\n\nimport React from \"react\";\nimport LazyLoad from 'react-lazyload';\nimport { formatDistanceToNow } from 'date-fns'\n\nconst imgStyle = {\n  transition: \"transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s\",\n};\nconst selectedImgStyle = {\n  transform: \"translateZ(0px) scale3d(0.9, 0.9, 1)\",\n  transition: \"transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s\",\n  margin: \"-30px 0\",\n};\n\nexport default function Photo(props) {\n  const {\n    index,\n    photo,\n    theme,\n    margin,\n    direction,\n    top,\n    left,\n    hovered,\n    handleHover,\n    updateMeme,\n  } = props;\n\n  const container = {\n    backgroundColor: theme === \"light\" ? \"#eee\" : \"#111\",\n    cursor: \"pointer\",\n    overflow: \"hidden\",\n    position: \"relative\",\n  };\n\n  let isHovered = hovered === index ? true : false;\n\n  //calculate x,y scale to sets the size of the container WRT images height and width\n  const sx = (100 - (80 / photo.width) * 100) / 100;\n  const sy = (100 - (80 / photo.height) * 100) / 100;\n\n  selectedImgStyle.transform = `translateZ(0px) scale3d(${sx}, ${sy}, 1)`;\n\n  //Direction is ReactMemeGallery feature to display memes in an order\n  if (direction === \"column\") {\n    container.position = \"absolute\";\n    container.left = left;\n    container.top = top;\n    if (isHovered) {\n      container.paddingBottom = \"6px\";\n    }\n  }\n\n  const {\n    id,\n    src,\n    date,\n    height,\n    width,\n    author,\n    caption,\n  } = photo;\n\n  // This variable is used to send the data to the backend when a meme is clicked\n  const data = {\n    name: author,\n    url: src,\n    caption: caption,\n    id,\n    index,\n  };\n\n  return (\n    <div\n      style={{ margin, width, ...container, height: isHovered ? \"\" : height }}\n      className={!isHovered ? \"photo-parent not-selected\" : \"photo-parent\"}\n      key={index}\n      onClick={() => updateMeme(data)}\n      onMouseEnter={() => handleHover(index)}\n      onMouseLeave={() => handleHover(null)}\n    >\n      {/* Display additional information when a meme is hovered */}\n      {isHovered && (\n        <div className=\"photo-header\">\n          <h3>{caption}</h3>\n        </div>\n      )}\n\n      {/* Lazily load the image component when the user is within 350px distance to the component */}\n      <LazyLoad height={height} width={width} once={true} offset={350}>\n        <img\n          alt={caption}\n          style={\n            isHovered ? { ...imgStyle, ...selectedImgStyle } : { ...imgStyle }\n          }\n          {...photo}\n        />\n      </LazyLoad>\n        \n      {/* Display additional information when a meme is hovered */}\n      {isHovered && (\n        <div className=\"photo-footer\">\n          <div className=\"photo-author\">Posted by {author}</div>\n          <div className=\"photo-date\">Posted {formatDistanceToNow(new Date(date))} ago</div>\n        </div>)}\n    </div>\n  );\n}\n","//meme-gallery.js\n\nimport React, { useState } from \"react\";\nimport Gallery from \"react-photo-gallery\";\n\nimport Photo from \"./customImageHandler\";\n\n/** \n * This component handles the main functionality to display the memes\n * It uses ReactPhotoGallery library to display the memes in an orderly and symettric fashion\n * To display the memes in that fashion we need to send the height and width of the image from the backend\n * And ReactPhotoGallery handles everything for us\n*/\n\nexport default function MemeGallery({ theme, setMemeData, memes }) {\n    const [hovered, setHovered] = useState(null);\n\n    const handleHover = (index) => {\n        setHovered(index);\n    };\n\n    return (\n        <Gallery\n            photos={memes}\n            direction={\"column\"}\n            margin={20}\n            renderImage={(props) =>\n                Photo({ ...props, hovered, handleHover, updateMeme: setMemeData, theme })\n            }\n        />\n    );\n}\n"],"sourceRoot":""}