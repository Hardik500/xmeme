{"version":3,"sources":["utils/api.js","global.js","components/loader.js","assets/icons/sun.svg","assets/icons/moon.svg","components/navbar.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["fetchAllMemes","a","skip","limit","axios","get","process","result","data","fetchAMeme","id","postMeme","inputData","post","patchMeme","patch","url","caption","GlobalStyles","createGlobalStyle","theme","body","text","ContentLoader","style","textAlign","type","color","height","width","timeout","PageLoader","display","alignItems","justifyContent","Navbar","toggleForm","toggleTheme","className","onClick","src","moonIcon","sunIcon","alt","lightTheme","toggleBorder","gradient","darkTheme","InfiniteScroll","lazy","Drawer","MemeGallery","MemeForm","require","config","App","useState","formVisible","setFormVisibility","setTheme","globalMemes","setGlobalMemesData","propMeme","setMemeProp","skipValue","setSkip","moreDataAvailable","setDataAvailability","fetchData","length","useEffect","addTheMeme","toast","success","tempMemes","unshift","updateTheMeme","index","splice","closeOnClick","pauseOnFocusLoss","fallback","dataLength","next","hasMore","loader","endMessage","setMemeData","props","memes","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22881b46.chunk.js","sourcesContent":["// api.js\n\n// This file contains the API calls that are used in the frontend to interact with the backend\n\nimport axios from \"axios\";\n\nexport const fetchAllMemes = async (skip = 0, limit = 100) => {\n    const result = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/memes?full=true&skip=${skip}&limit=${limit}`);\n    return result.data;\n}\n\nexport const fetchAMeme = async (id) => {\n    const result = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/memes/${id}?full=true`);\n    return result.data;\n}\n\nexport const postMeme = async (inputData) => {\n    const result = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/memes`, inputData);\n    return result.data;\n}\n\nexport const patchMeme = async (id, inputData) => {\n    await axios.patch(`${process.env.REACT_APP_BACKEND_URL}/memes/${id}`, {url: inputData.url, caption: inputData.caption});\n}","\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    align-items: center;\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    transition: all 0.25s linear;\n  }`","//loader.js\n\nimport Loader from \"react-loader-spinner\";\n\n// This file contains the loader components for reusablity purposes\n\nexport const ContentLoader = () => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Loader\n        type=\"Bars\"\n        color=\"#e28640\"\n        height={75}\n        width={75}\n        timeout={3000} //3 secs\n      />\n    </div>\n  );\n};\n\nexport const PageLoader = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n      }}\n    >\n      <Loader\n        type=\"Puff\"\n        color=\"#e28640\"\n        height={75}\n        width={75}\n        timeout={10000} //10 secs\n      />\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/sun.31ad4aaf.svg\";","export default __webpack_public_path__ + \"static/media/moon.a82cae44.svg\";","//navbar.js\n\n/** \n * This is a navbar component which handles the toggle theme functionality to switch b/w dark and light theme\n * And also presents a button to display the form where the user can submit new memes\n*/\n\n\nimport sunIcon from \"../assets/icons/sun.svg\";\nimport moonIcon from \"../assets/icons/moon.svg\";\n\nexport default function Navbar({ theme, toggleForm, toggleTheme }) {\n  return (\n    <div className=\"navbar\">\n      <div className=\"header\">XMeme</div>\n      <button className=\"add-meme-btn cstm-btn\" onClick={toggleForm}>\n        <div>Add a Meme</div>\n      </button>\n      <button className=\"btn-none theme-btn\" onClick={toggleTheme}>\n        <img\n          width={24}\n          height={24}\n          className=\"theme-img\"\n          src={theme === \"light\" ? moonIcon : sunIcon}\n          alt={theme}\n        />\n      </button>\n    </div>\n  );\n}\n","export const lightTheme = {\n    body: '#E2E2E2',\n    text: '#363537',\n    toggleBorder: '#FFF',\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\n}\n\nexport const darkTheme = {\n    body: '#363537',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    gradient: 'linear-gradient(#091236, #1E215D)',\n}","// App.js\n\nimport \"./App.css\";\nimport { GlobalStyles } from \"./global\";\n\nimport React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport { ContentLoader, PageLoader } from \"./components/loader\";\nimport Navbar from \"./components/navbar\";\nimport { lightTheme, darkTheme } from \"./theme\";\nimport { fetchAllMemes, fetchAMeme } from \"./utils/api\";\n\nconst InfiniteScroll = lazy(() => import(\"react-infinite-scroll-component\"));\nconst Drawer = lazy(() => import(\"react-drag-drawer\"));\nconst MemeGallery = lazy(() => import('./components/memeGallery'));\nconst MemeForm = lazy(() => import('./components/memeForm'));\n\nrequire(\"dotenv\").config();\n\nfunction App() {\n  //Toggles form display\n  const [formVisible, setFormVisibility] = useState(false);\n  \n  //Switches theme\n  const [theme, setTheme] = useState(\"dark\");\n\n  //Array of objects of memes\n  const [globalMemes, setGlobalMemesData] = useState([]);\n\n  //Data used for sending data to form in order to update a meme\n  const [propMeme, setMemeProp] = useState(null);\n\n  //Sets the skip value to get the data from the backend after a certain limit\n  const [skipValue, setSkip] = useState(0);\n\n  //Checks if more memes are available\n  const [moreDataAvailable, setDataAvailability] = useState(true);\n\n  //Limits the number of memes we get from the backend\n  const limit = 100;\n\n  // The function that toggles between themes\n  const toggleTheme = () => {\n    // if the theme is not light, then set it to dark\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n      // otherwise, it should be light\n    } else {\n      setTheme(\"light\");\n    }\n  };\n\n  /** \n   * This function fetches the meme from the backend, then\n   * If no more memes are available then sets the value of moreDataAvailable to false,\n   * updates the value of globalMemes \n   * And updates the value of skip\n   * */\n  const fetchData = async () => {\n    const result = await fetchAllMemes(skipValue, limit);\n\n    if (result.length === 0) {\n      setDataAvailability(false);\n    }\n\n    setGlobalMemesData([...globalMemes, ...result]);\n    setSkip(skipValue + limit);\n  };\n\n\n  // The first function which gets called when the componentIsMounted\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  /**\n   * This function changes the value of toggle form to true\n   * And also update propMeme value to contain the updated meme info\n   * */\n  const setMemeData = (props) => {\n    toggleForm();\n    setMemeProp(props);\n  };\n\n  /**\n   * This function handles the submission of memes\n   * Displays a toast message on successful submission\n   * Add the meme in the beginning of the globalMemes array to show it on top\n   * And in the end sets the value of toggle form to false to hide it\n   * */\n\n  const addTheMeme = async ({ id }) => {\n    const result = await fetchAMeme(id);\n    toast.success(\"Meme added !!\");\n    let tempMemes = globalMemes;\n    tempMemes.unshift(result);\n    setGlobalMemesData(tempMemes);\n    toggleForm();\n  };\n\n  /**\n   * This function handles the updation of memes\n   * Displays a toast message on successful submission\n   * Add the meme in the beginning of the globalMemes array to show it on top\n   * And in the end sets the value of toggle form to false to hide it\n   * */\n\n  const updateTheMeme = async ({ id, index }) => {\n    const result = await fetchAMeme(id);\n    toast.success(\"Meme updated 😁\");\n    let tempMemes = globalMemes;\n    tempMemes.splice(index, 1);\n    tempMemes.unshift(result);\n    setGlobalMemesData(tempMemes);\n    toggleForm();\n  };\n\n  /**\n   * This function toggles the visible of form\n   * And also sets the memeProp to false when we hide the form\n   * */\n\n  const toggleForm = () => {\n    setFormVisibility(!formVisible);\n\n    if (formVisible === false) {\n      setMemeProp(null);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <>\n        <ToastContainer\n          closeOnClick\n          pauseOnFocusLoss\n          limit={2}\n        />\n        <GlobalStyles />\n        <Navbar\n          toggleForm={toggleForm}\n          toggleTheme={toggleTheme}\n          theme={theme}\n        />\n        {/* Lazy loading of components and using the loader as a fallback */}\n        <Suspense fallback={<PageLoader />}>\n          {globalMemes.length ? (\n            <InfiniteScroll\n              dataLength={globalMemes.length}\n              next={fetchData}\n              hasMore={moreDataAvailable}\n              loader={<ContentLoader />}\n              endMessage={\n                <p style={{ textAlign: \"center\" }}>\n                  <b>Yay! You have seen it all</b>\n                </p>\n              }\n            >\n              <MemeGallery\n                theme={theme}\n                setMemeData={setMemeData}\n                memes={globalMemes}\n                formVisible={formVisible}\n                toggleForm={toggleForm}\n              />\n            </InfiniteScroll>\n          ) : (\n              <PageLoader />\n            )}\n\n          <Suspense fallback={<PageLoader />}>\n            <Drawer open={formVisible}>\n              <MemeForm\n                toast={toast}\n                props={propMeme}\n                addTheMeme={addTheMeme}\n                updateTheMeme={updateTheMeme}\n                toggleForm={toggleForm}\n              />\n            </Drawer>\n          </Suspense>\n        </Suspense>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}